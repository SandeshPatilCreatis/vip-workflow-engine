package fr.insalyon.creatis.moteurlite;

import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.JsonNode;
import com.fasterxml.jackson.databind.ObjectMapper;
import com.fasterxml.jackson.databind.node.ArrayNode;
import com.fasterxml.jackson.databind.node.JsonNodeFactory;
import com.fasterxml.jackson.databind.node.ObjectNode;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import java.io.File;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
    
public class XMLtoJSONConverter {
    public static void convertXMLtoJSON(String fileName) {
        try {
            File inputFile = new File(fileName);
            DocumentBuilderFactory dbFactory = DocumentBuilderFactory.newInstance();
            DocumentBuilder dBuilder = dbFactory.newDocumentBuilder();
            Document doc = dBuilder.parse(inputFile);
            doc.getDocumentElement().normalize();

            ObjectMapper mapper = new ObjectMapper();
            ObjectNode jsonRoot = mapper.createObjectNode();

            Map<String, String> resultDirMap = extractResultDirectory(doc);

            NodeList sourceList = doc.getElementsByTagName("source");
            for (int i = 0; i < sourceList.getLength(); i++) {
                Node sourceNode = sourceList.item(i);
                if (sourceNode.getNodeType() == Node.ELEMENT_NODE) {
                    Element sourceElement = (Element) sourceNode;
                    String name = sourceElement.getAttribute("name");
                    if (!name.equals("results-directory")) {
                        NodeList itemNodes = sourceElement.getElementsByTagName("item");
                        ArrayNode valuesArray = mapper.createArrayNode();
                        for (int j = 0; j < itemNodes.getLength(); j++) {
                            Node itemNode = itemNodes.item(j);
                            if (itemNode.getNodeType() == Node.ELEMENT_NODE) {
                                Element itemElement = (Element) itemNode;
                                String value = itemElement.getTextContent().trim();
                                if (isNumber(value)) {
                                    valuesArray.add(JsonNodeFactory.instance.numberNode(Double.parseDouble(value)));
                                } else if ("File".equals(sourceElement.getAttribute("type"))) {
                                    valuesArray.add(value);
                                } else if ("Flag".equals(sourceElement.getAttribute("type"))) {
                                    valuesArray.add(Boolean.parseBoolean(value));
                                } else {
                                    valuesArray.add(value);
                                }
                            }
                        }
                        jsonRoot.set(name, valuesArray);
                    }
                }
            }

            System.out.println(jsonRoot.toString());
            System.out.println("Results Directory Map: " + resultDirMap);

            // Perform dot and cross iterations
            List<Map<String, String>> dotCombinations = performDotIteration(jsonRoot);
            List<Map<String, String>> crossCombinations = performCrossIteration(jsonRoot);

            // Printing dot combinations
            System.out.println("Dot Combinations:");
            for (Map<String, String> combination : dotCombinations) {
                System.out.println(mapToJsonString(combination));
            }

            // Printing cross combinations
            System.out.println("Cross Combinations:");
            for (Map<String, String> combination : crossCombinations) {
                System.out.println(mapToJsonString(combination));
            }

        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private static boolean isNumber(String str) {
        try {
            Double.parseDouble(str);
            return true;
        } catch (NumberFormatException e) {
            return false;
        }
    }

    private static Map<String, String> extractResultDirectory(Document doc) {
        Map<String, String> resultDirMap = new HashMap<>();
        NodeList sourceList = doc.getElementsByTagName("source");
        for (int i = 0; i < sourceList.getLength(); i++) {
            Node sourceNode = sourceList.item(i);
            if (sourceNode.getNodeType() == Node.ELEMENT_NODE) {
                Element sourceElement = (Element) sourceNode;
                String name = sourceElement.getAttribute("name");
                if (name.equals("results-directory")) {
                    NodeList itemNodes = sourceElement.getElementsByTagName("item");
                    for (int j = 0; j < itemNodes.getLength(); j++) {
                        Node itemNode = itemNodes.item(j);
                        if (itemNode.getNodeType() == Node.ELEMENT_NODE) {
                            Element itemElement = (Element) itemNode;
                            String value = itemElement.getTextContent().trim();
                            resultDirMap.put(name, value);
                        }
                    }
                }
            }
        }
        return resultDirMap;
    }

    private static List<Map<String, String>> performDotIteration(ObjectNode jsonRoot) {
        List<Map<String, String>> dotCombinations = new ArrayList<>();
        jsonRoot.fields().forEachRemaining(entry -> {
            String key = entry.getKey();
            JsonNode values = entry.getValue();
            if (values.isArray() && values.size() > 0) {
                Map<String, String> combination = new HashMap<>();
                combination.put(key, values.get(0).asText());
                dotCombinations.add(combination);
            }
        });
        return dotCombinations;
    }

    private static List<Map<String, String>> performCrossIteration(ObjectNode jsonRoot) {
        List<Map<String, String>> crossCombinations = new ArrayList<>();
        jsonRoot.fields().forEachRemaining(entry1 -> {
            String key1 = entry1.getKey();
            JsonNode values1 = entry1.getValue();
            jsonRoot.fields().forEachRemaining(entry2 -> {
                String key2 = entry2.getKey();
                JsonNode values2 = entry2.getValue();
                if (!key1.equals(key2)) {
                    values1.forEach(value1 -> {
                        values2.forEach(value2 -> {
                            Map<String, String> combination = new HashMap<>();
                            combination.put(key1, value1.asText());
                            combination.put(key2, value2.asText());
                            crossCombinations.add(combination);
                        });
                    });
                }
            });
        });
        return crossCombinations;
    }

    private static String mapToJsonString(Map<String, String> map) {
        ObjectMapper mapper = new ObjectMapper();
        try {
            return mapper.writeValueAsString(map);
        } catch (JsonProcessingException e) {
            e.printStackTrace();
            return "{}";
        }
    }
}